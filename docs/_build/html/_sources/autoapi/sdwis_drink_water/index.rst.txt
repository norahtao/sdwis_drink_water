:py:mod:`sdwis_drink_water`
===========================

.. py:module:: sdwis_drink_water

.. autoapi-nested-parse::

   sdwis-drink-water: Safe Drinking Water Information System (SDWIS) API Wrapper



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   models/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   api/index.rst
   api_for_table/index.rst
   configs/index.rst
   data_praser/index.rst
   errors/index.rst
   sdwis_drink_water/index.rst
   utils/index.rst
   utils_for_jupyter_print/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   sdwis_drink_water.SdwisAPI
   sdwis_drink_water.SdwisTable
   sdwis_drink_water.ResultDataParser
   sdwis_drink_water.EnforcementAction
   sdwis_drink_water.GeographicArea
   sdwis_drink_water.LcrSample
   sdwis_drink_water.LcrSampleResult
   sdwis_drink_water.ServiceArea
   sdwis_drink_water.Treatment
   sdwis_drink_water.Violation
   sdwis_drink_water.ViolationEnfAssoc
   sdwis_drink_water.WaterSystem
   sdwis_drink_water.WaterSystemFacility



Functions
~~~~~~~~~

.. autoapisummary::

   sdwis_drink_water.tabulate_for_jupyter
   sdwis_drink_water.print_column_description
   sdwis_drink_water.print_result_data
   sdwis_drink_water.print_columns



Attributes
~~~~~~~~~~

.. autoapisummary::

   sdwis_drink_water.__version__
   sdwis_drink_water.__author__
   sdwis_drink_water.__license__
   sdwis_drink_water.api
   sdwis_drink_water.lcr_sample
   sdwis_drink_water.lcr_sample_result
   sdwis_drink_water.violation
   sdwis_drink_water.water_system
   sdwis_drink_water.water_system_facility
   sdwis_drink_water.geographic_area
   sdwis_drink_water.enforcement_action
   sdwis_drink_water.service_area
   sdwis_drink_water.treatment
   sdwis_drink_water.violation_enf_assoc


.. py:data:: __version__
   :value: '1.1.0'

   

.. py:data:: __author__
   :value: ''

   

.. py:data:: __license__
   :value: 'MIT'

   

.. py:class:: SdwisAPI(base_url='https://data.epa.gov/efservice', retry_count=0, retry_delay=0, timeout=10, user_agent=None, enable_cache=True, cache_time=3600, print_url=False)


   The SdwisAPI class provides an interface to interact with the EPA's SDWIS data service.
   It supports making HTTP requests with optional caching and retries.

   .. attribute:: base_url

      The base URL for the EPA's data service.

      :type: str

   .. attribute:: retry_count

      Number of times to retry a request on failure.

      :type: int

   .. attribute:: retry_delay

      Delay between retries in seconds.

      :type: int

   .. attribute:: timeout

      Timeout for the HTTP requests.

      :type: int

   .. attribute:: enable_cache

      Flag to enable or disable request caching.

      :type: bool

   .. attribute:: cache_time

      Duration for which the cache is valid.

      :type: int

   .. attribute:: print_url

      Flag to enable or disable printing of the request URL.

      :type: bool

   .. attribute:: user_agent

      User agent string for the HTTP requests.

      :type: str

   .. py:method:: get_request(url, endpoint_parameters=(), params=None, only_count=False, headers=None, use_cache=True, multi_mode=False, **kwargs)

      Sends a GET request to the specified URL with optional parameters.

      :param url: The URL to send the request to.
      :type url: str
      :param endpoint_parameters: Additional parameters for the endpoint.
      :type endpoint_parameters: tuple
      :param params: Query parameters for the request.
      :type params: dict
      :param only_count: Flag to return only count in the response.
      :type only_count: bool
      :param headers: HTTP headers for the request.
      :type headers: dict
      :param use_cache: Flag to use cache for the request.
      :type use_cache: bool
      :param multi_mode: Flag to enable or disable multi-threading mode.
      :type multi_mode: bool
      :param kwargs: Additional keyword arguments.

      :returns: Parsed JSON response from the API / Or number
      :rtype: dict or int

      :raises SdwisHTTPException: If the HTTP request fails or returns an error.



.. py:class:: SdwisTable(enable_cache=True, print_url=False)


   A class to interact with the SDWIS Table API.

   .. attribute:: sdwis_api

      Instance of the SdwisAPI class.

      :type: SdwisAPI

   .. py:method:: _get_data_by_request(query_url, print_to_console=False, multi_threads=False)

      Internal method to get data by sending a request to the specified URL.

      :param query_url: The URL to send the request to.
      :type query_url: str
      :param print_to_console: Flag to print the result to console.
      :type print_to_console: bool
      :param multi_threads: Flag to enable multi-threading for the request.
      :type multi_threads: bool

      :returns: The query result as a list of dictionaries.
      :rtype: list


   .. py:method:: _get_result_data_by_request(query_url, print_to_console=False)

      Internal method to get data by sending a request to the specified URL.

      :param query_url: The URL to send the request to.
      :type query_url: str
      :param print_to_console: Flag to print the result to console.
      :type print_to_console: bool

      :returns: The query result as a list of dictionaries.
      :rtype: ResultDataParser


   .. py:method:: get_all_table_names(print_to_console=True)

      Retrieves all table names from the SDWIS database.

      :param print_to_console: Flag to print the table names to console.
      :type print_to_console: bool

      :returns: A list of all table names.
      :rtype: list


   .. py:method:: get_all_table_names_and_descriptions(print_to_console=True)

      Retrieves all table names and their descriptions from the SDWIS database.

      :param print_to_console: Flag to print the table names and descriptions to console.
      :type print_to_console: bool

      :returns: A list of table names and descriptions or a dictionary if not printed.
      :rtype: list or dict


   .. py:method:: get_table_column_name_by_table_name(table_name='', print_to_console=True)

      Retrieves column names for a specified table.

      :param table_name: Name of the table.
      :type table_name: str
      :param print_to_console: Flag to print the column names to console.
      :type print_to_console: bool

      :returns: A list of column names for the specified table.
      :rtype: list


   .. py:method:: get_columns_description_by_table_name(table_name='', print_to_console=True, multi_threads=False)

      Retrieves descriptions for all columns of a specified table.

      :param table_name: Name of the table.
      :type table_name: str
      :param print_to_console: Flag to print column descriptions to console.
      :type print_to_console: bool
      :param multi_threads: Flag to enable multi threads requests.
      :type multi_threads: bool

      :returns: A dictionary mapping column names to their descriptions.
      :rtype: dict


   .. py:method:: get_table_data_number(table_name='')

      Retrieves the number of records in a specified table.

      :param table_name: Name of the table.
      :type table_name: str

      :returns: The total number of records in the table.
      :rtype: int


   .. py:method:: get_table_first_data_by_table_name(table_name='', print_to_console=True)

      Retrieves the first record of a specified table.

      :param table_name: Name of the table.
      :type table_name: str
      :param print_to_console: Flag to print the first record to console.
      :type print_to_console: bool

      :returns: The first record of the table.
      :rtype: dict or ResultDataParser


   .. py:method:: get_table_first_n_data_by_table_name(table_name='', n=0, print_to_console=True, multi_threads=False)

      Retrieves the first 'n' records of a specified table.

      :param table_name: Name of the table.
      :type table_name: str
      :param n: Number of records to retrieve.
      :type n: int
      :param print_to_console: Flag to print the records to console.
      :type print_to_console: bool
      :param multi_threads: Flag to enable multi-threading.
      :type multi_threads: bool

      :returns: A list of the first 'n' records from the table.
      :rtype: list or ResultDataParser


   .. py:method:: get_data_by_conditions(table_name='', condition1='', condition2='', condition3='', print_to_console=True, only_count=False)

      Retrieves data from a table based on specified conditions.

      :param table_name: Name of the table.
      :type table_name: str
      :param condition1: Conditions for data retrieval.
      :type condition1: str
      :param condition2: Conditions for data retrieval.
      :type condition2: str
      :param condition3: Conditions for data retrieval.
      :type condition3: str
      :param print_to_console: Flag to print the results to console.
      :type print_to_console: bool
      :param only_count: Flag to retrieve only the count of matching records.
      :type only_count: bool

      :returns: List of matching records, or count of records if only_count is True.
      :rtype: list or int


   .. py:method:: summarize_data_by_epa_region(table_name='', print_to_console=True, multi_threads=False)

      Summarizes data by EPA region for a specified table.

      :param table_name: Name of the table.
      :type table_name: str
      :param print_to_console: Flag to print summary to console.
      :type print_to_console: bool
      :param multi_threads: Flag to enable multi-threading.
      :type multi_threads: bool

      :returns: A list containing the data summary by EPA region.
      :rtype: list


   .. py:method:: get_data_by_epa_region(table_name='', epa_region=1, print_to_console=True, only_count=False, multi_mode=False)

      Retrieves data from a table filtered by a specific EPA region.
      SAMPLE URL: https://data.epa.gov/efservice/LCR_SAMPLE/EPA_REGION/=/01/JSON
      :param table_name: Name of the table.
      :type table_name: str
      :param epa_region: EPA region number.
      :type epa_region: int
      :param print_to_console: Flag to print the results to console.
      :type print_to_console: bool
      :param only_count: Flag to retrieve only the count of records.
      :type only_count: bool
      :param multi_mode: Flag to enable multi-threading.
      :type multi_mode: bool

      :returns: List of records or count of records if only_count is True.
      :rtype: list or int



.. py:class:: ResultDataParser(data)


   .. py:method:: get_first_n_records(n)

      Return the first n records from the data.


   .. py:method:: count()

      Return the first n records from the data.


   .. py:method:: show()

      Return the first n records from the data.


   .. py:method:: _get_column_values(key)

      Extract all values for a given key from the data.


   .. py:method:: _get_column_values_with_records(key)

      Extract all values for a given key from the data along with their corresponding records.


   .. py:method:: find_max(key)

      Find the maximum value(s) and corresponding records for a given key.


   .. py:method:: find_min(key)

      Find the minimum value(s) and corresponding records for a given key.


   .. py:method:: _parse_condition(condition)


   .. py:method:: _filter_by_condition(condition)


   .. py:method:: find_min_with_condition(key, condition)


   .. py:method:: find_max_with_condition(key, condition)


   .. py:method:: find_by_condition(condition)

      Find records that match a condition like 'KEY>value'.


   .. py:method:: get_all_keys()

      Return a set of all keys in the data.


   .. py:method:: export_data(filename, format_type='csv')

      Export data to a file in the specified format.


   .. py:method:: intersect_with(other_data)

      Find the intersection of the current data with the specified data.
      :param other_data: The specified data to intersect with.
      :type other_data: ResultDataParser

      :returns: New instance containing the intersecting records.
      :rtype: ResultDataParser


   .. py:method:: difference_with(other_data)

      Find the difference between the current data and specified data.
      :param other_data: The specified data to compare with.
      :type other_data: ResultDataParser

      :returns: New instance containing the difference.
      :rtype: ResultDataParser


   .. py:method:: merge_with(other_data)

      Merge the current data with the specified data.
      :param other_data: The specified data to merge with.
      :type other_data: ResultDataParser

      :returns: New instance containing the merged data.
      :rtype: ResultDataParser


   .. py:method:: remove_key(key_to_remove)

      Remove a specified key from all data records.
      :param key_to_remove: The key to be removed from the data records.
      :type key_to_remove: str

      :returns: New instance with the key removed from all records.
      :rtype: ResultDataParser



.. py:class:: EnforcementAction(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_enforcement_action_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: GeographicArea(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_geographic_area_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_geographic_area_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_geographic_area_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: LcrSample(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_lcr_sample_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_lcr_sample_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_lcr_sample_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: LcrSampleResult(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_lcr_sample_result_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_lcr_sample_result_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_lcr_sample_result_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: ServiceArea(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_service_area_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: Treatment(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_treatment_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: Violation(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_violation_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_violation_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_violation_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: ViolationEnfAssoc(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_violation_enf_assoc_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: WaterSystem(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_water_system_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_water_system_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_water_system_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: WaterSystemFacility(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_water_system_facility_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_water_system_facility_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_water_system_facility_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:function:: tabulate_for_jupyter(table)


.. py:function:: print_column_description(result_dict)


.. py:function:: print_result_data(result_data)


.. py:function:: print_columns(column_names)


.. py:data:: api

   

.. py:data:: lcr_sample

   

.. py:data:: lcr_sample_result

   

.. py:data:: violation

   

.. py:data:: water_system

   

.. py:data:: water_system_facility

   

.. py:data:: geographic_area

   

.. py:data:: enforcement_action

   

.. py:data:: service_area

   

.. py:data:: treatment

   

.. py:data:: violation_enf_assoc

   


:py:mod:`sdwis_drink_water.models`
==================================

.. py:module:: sdwis_drink_water.models


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   enforcement_action/index.rst
   geographic_area/index.rst
   lcr_sample/index.rst
   lcr_sample_result/index.rst
   service_area/index.rst
   treatment/index.rst
   violation/index.rst
   violation_enf_assoc/index.rst
   water_system/index.rst
   water_system_facility/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   sdwis_drink_water.models.EnforcementAction
   sdwis_drink_water.models.GeographicArea
   sdwis_drink_water.models.LcrSample
   sdwis_drink_water.models.LcrSampleResult
   sdwis_drink_water.models.ServiceArea
   sdwis_drink_water.models.Treatment
   sdwis_drink_water.models.Violation
   sdwis_drink_water.models.ViolationEnfAssoc
   sdwis_drink_water.models.WaterSystem
   sdwis_drink_water.models.WaterSystemFacility




.. py:class:: EnforcementAction(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_enforcement_action_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: GeographicArea(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_geographic_area_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_geographic_area_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_geographic_area_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: LcrSample(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_lcr_sample_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_lcr_sample_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_lcr_sample_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: LcrSampleResult(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_lcr_sample_result_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_lcr_sample_result_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_lcr_sample_result_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: ServiceArea(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_service_area_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: Treatment(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_treatment_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: Violation(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_violation_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_violation_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_violation_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: ViolationEnfAssoc(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: get_violation_enf_assoc_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: WaterSystem(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_water_system_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_water_system_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_water_system_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



.. py:class:: WaterSystemFacility(print_url=False)


   .. py:method:: get_table_column_name(print_to_console=True)


   .. py:method:: get_table_columns_description(multi_threads=False, print_to_console=True)


   .. py:method:: get_table_data_number()


   .. py:method:: get_table_first_data(print_to_console=True)


   .. py:method:: get_table_first_n_data(n=0, multi_threads=False, print_to_console=True)


   .. py:method:: summarize_water_system_facility_data_by_epa_region(print_to_console=True, multi_threads=False)


   .. py:method:: get_water_system_facility_by_epa_region(epa_region=1, print_to_console=True, only_count=False)


   .. py:method:: get_water_system_facility_data_by_conditions(condition1='', condition2='', condition3='', print_to_console=True, only_count=False)



